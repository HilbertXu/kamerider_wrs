# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from human_navigation/HumanNaviAvatarStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class HumanNaviAvatarStatus(genpy.Message):
  _md5sum = "f9190ca25b6cd6192693cc3f2a3156de"
  _type = "human_navigation/HumanNaviAvatarStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Pose head
geometry_msgs/Pose body
geometry_msgs/Pose left_hand
geometry_msgs/Pose right_hand
string object_in_left_hand
string object_in_right_hand
bool is_target_object_in_left_hand
bool is_target_object_in_right_hand

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['head','body','left_hand','right_hand','object_in_left_hand','object_in_right_hand','is_target_object_in_left_hand','is_target_object_in_right_hand']
  _slot_types = ['geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','string','string','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       head,body,left_hand,right_hand,object_in_left_hand,object_in_right_hand,is_target_object_in_left_hand,is_target_object_in_right_hand

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HumanNaviAvatarStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.head is None:
        self.head = geometry_msgs.msg.Pose()
      if self.body is None:
        self.body = geometry_msgs.msg.Pose()
      if self.left_hand is None:
        self.left_hand = geometry_msgs.msg.Pose()
      if self.right_hand is None:
        self.right_hand = geometry_msgs.msg.Pose()
      if self.object_in_left_hand is None:
        self.object_in_left_hand = ''
      if self.object_in_right_hand is None:
        self.object_in_right_hand = ''
      if self.is_target_object_in_left_hand is None:
        self.is_target_object_in_left_hand = False
      if self.is_target_object_in_right_hand is None:
        self.is_target_object_in_right_hand = False
    else:
      self.head = geometry_msgs.msg.Pose()
      self.body = geometry_msgs.msg.Pose()
      self.left_hand = geometry_msgs.msg.Pose()
      self.right_hand = geometry_msgs.msg.Pose()
      self.object_in_left_hand = ''
      self.object_in_right_hand = ''
      self.is_target_object_in_left_hand = False
      self.is_target_object_in_right_hand = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_28d().pack(_x.head.position.x, _x.head.position.y, _x.head.position.z, _x.head.orientation.x, _x.head.orientation.y, _x.head.orientation.z, _x.head.orientation.w, _x.body.position.x, _x.body.position.y, _x.body.position.z, _x.body.orientation.x, _x.body.orientation.y, _x.body.orientation.z, _x.body.orientation.w, _x.left_hand.position.x, _x.left_hand.position.y, _x.left_hand.position.z, _x.left_hand.orientation.x, _x.left_hand.orientation.y, _x.left_hand.orientation.z, _x.left_hand.orientation.w, _x.right_hand.position.x, _x.right_hand.position.y, _x.right_hand.position.z, _x.right_hand.orientation.x, _x.right_hand.orientation.y, _x.right_hand.orientation.z, _x.right_hand.orientation.w))
      _x = self.object_in_left_hand
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.object_in_right_hand
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.is_target_object_in_left_hand, _x.is_target_object_in_right_hand))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.head is None:
        self.head = geometry_msgs.msg.Pose()
      if self.body is None:
        self.body = geometry_msgs.msg.Pose()
      if self.left_hand is None:
        self.left_hand = geometry_msgs.msg.Pose()
      if self.right_hand is None:
        self.right_hand = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 224
      (_x.head.position.x, _x.head.position.y, _x.head.position.z, _x.head.orientation.x, _x.head.orientation.y, _x.head.orientation.z, _x.head.orientation.w, _x.body.position.x, _x.body.position.y, _x.body.position.z, _x.body.orientation.x, _x.body.orientation.y, _x.body.orientation.z, _x.body.orientation.w, _x.left_hand.position.x, _x.left_hand.position.y, _x.left_hand.position.z, _x.left_hand.orientation.x, _x.left_hand.orientation.y, _x.left_hand.orientation.z, _x.left_hand.orientation.w, _x.right_hand.position.x, _x.right_hand.position.y, _x.right_hand.position.z, _x.right_hand.orientation.x, _x.right_hand.orientation.y, _x.right_hand.orientation.z, _x.right_hand.orientation.w,) = _get_struct_28d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object_in_left_hand = str[start:end].decode('utf-8')
      else:
        self.object_in_left_hand = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object_in_right_hand = str[start:end].decode('utf-8')
      else:
        self.object_in_right_hand = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.is_target_object_in_left_hand, _x.is_target_object_in_right_hand,) = _get_struct_2B().unpack(str[start:end])
      self.is_target_object_in_left_hand = bool(self.is_target_object_in_left_hand)
      self.is_target_object_in_right_hand = bool(self.is_target_object_in_right_hand)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_28d().pack(_x.head.position.x, _x.head.position.y, _x.head.position.z, _x.head.orientation.x, _x.head.orientation.y, _x.head.orientation.z, _x.head.orientation.w, _x.body.position.x, _x.body.position.y, _x.body.position.z, _x.body.orientation.x, _x.body.orientation.y, _x.body.orientation.z, _x.body.orientation.w, _x.left_hand.position.x, _x.left_hand.position.y, _x.left_hand.position.z, _x.left_hand.orientation.x, _x.left_hand.orientation.y, _x.left_hand.orientation.z, _x.left_hand.orientation.w, _x.right_hand.position.x, _x.right_hand.position.y, _x.right_hand.position.z, _x.right_hand.orientation.x, _x.right_hand.orientation.y, _x.right_hand.orientation.z, _x.right_hand.orientation.w))
      _x = self.object_in_left_hand
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.object_in_right_hand
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.is_target_object_in_left_hand, _x.is_target_object_in_right_hand))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.head is None:
        self.head = geometry_msgs.msg.Pose()
      if self.body is None:
        self.body = geometry_msgs.msg.Pose()
      if self.left_hand is None:
        self.left_hand = geometry_msgs.msg.Pose()
      if self.right_hand is None:
        self.right_hand = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 224
      (_x.head.position.x, _x.head.position.y, _x.head.position.z, _x.head.orientation.x, _x.head.orientation.y, _x.head.orientation.z, _x.head.orientation.w, _x.body.position.x, _x.body.position.y, _x.body.position.z, _x.body.orientation.x, _x.body.orientation.y, _x.body.orientation.z, _x.body.orientation.w, _x.left_hand.position.x, _x.left_hand.position.y, _x.left_hand.position.z, _x.left_hand.orientation.x, _x.left_hand.orientation.y, _x.left_hand.orientation.z, _x.left_hand.orientation.w, _x.right_hand.position.x, _x.right_hand.position.y, _x.right_hand.position.z, _x.right_hand.orientation.x, _x.right_hand.orientation.y, _x.right_hand.orientation.z, _x.right_hand.orientation.w,) = _get_struct_28d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object_in_left_hand = str[start:end].decode('utf-8')
      else:
        self.object_in_left_hand = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object_in_right_hand = str[start:end].decode('utf-8')
      else:
        self.object_in_right_hand = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.is_target_object_in_left_hand, _x.is_target_object_in_right_hand,) = _get_struct_2B().unpack(str[start:end])
      self.is_target_object_in_left_hand = bool(self.is_target_object_in_left_hand)
      self.is_target_object_in_right_hand = bool(self.is_target_object_in_right_hand)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_28d = None
def _get_struct_28d():
    global _struct_28d
    if _struct_28d is None:
        _struct_28d = struct.Struct("<28d")
    return _struct_28d
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
