# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from human_navigation/HumanNaviObjectStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import human_navigation.msg

class HumanNaviObjectStatus(genpy.Message):
  _md5sum = "dc923dcd95df576c03a3a3f61c038230"
  _type = "human_navigation/HumanNaviObjectStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """HumanNaviObjectInfo target_object
HumanNaviObjectInfo[] non_target_objects

================================================================================
MSG: human_navigation/HumanNaviObjectInfo
string name
geometry_msgs/Point position
geometry_msgs/Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['target_object','non_target_objects']
  _slot_types = ['human_navigation/HumanNaviObjectInfo','human_navigation/HumanNaviObjectInfo[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       target_object,non_target_objects

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HumanNaviObjectStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.target_object is None:
        self.target_object = human_navigation.msg.HumanNaviObjectInfo()
      if self.non_target_objects is None:
        self.non_target_objects = []
    else:
      self.target_object = human_navigation.msg.HumanNaviObjectInfo()
      self.non_target_objects = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.target_object.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.target_object.position.x, _x.target_object.position.y, _x.target_object.position.z, _x.target_object.orientation.x, _x.target_object.orientation.y, _x.target_object.orientation.z, _x.target_object.orientation.w))
      length = len(self.non_target_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.non_target_objects:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.orientation
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.target_object is None:
        self.target_object = human_navigation.msg.HumanNaviObjectInfo()
      if self.non_target_objects is None:
        self.non_target_objects = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target_object.name = str[start:end].decode('utf-8')
      else:
        self.target_object.name = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.target_object.position.x, _x.target_object.position.y, _x.target_object.position.z, _x.target_object.orientation.x, _x.target_object.orientation.y, _x.target_object.orientation.z, _x.target_object.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.non_target_objects = []
      for i in range(0, length):
        val1 = human_navigation.msg.HumanNaviObjectInfo()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _v3 = val1.position
        _x = _v3
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v4 = val1.orientation
        _x = _v4
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.non_target_objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.target_object.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.target_object.position.x, _x.target_object.position.y, _x.target_object.position.z, _x.target_object.orientation.x, _x.target_object.orientation.y, _x.target_object.orientation.z, _x.target_object.orientation.w))
      length = len(self.non_target_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.non_target_objects:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v5 = val1.position
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = val1.orientation
        _x = _v6
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.target_object is None:
        self.target_object = human_navigation.msg.HumanNaviObjectInfo()
      if self.non_target_objects is None:
        self.non_target_objects = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target_object.name = str[start:end].decode('utf-8')
      else:
        self.target_object.name = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.target_object.position.x, _x.target_object.position.y, _x.target_object.position.z, _x.target_object.orientation.x, _x.target_object.orientation.y, _x.target_object.orientation.z, _x.target_object.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.non_target_objects = []
      for i in range(0, length):
        val1 = human_navigation.msg.HumanNaviObjectInfo()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _v7 = val1.position
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v8 = val1.orientation
        _x = _v8
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.non_target_objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
