// Generated by gencpp from file human_navigation/HumanNaviTaskInfo.msg
// DO NOT EDIT!


#ifndef HUMAN_NAVIGATION_MESSAGE_HUMANNAVITASKINFO_H
#define HUMAN_NAVIGATION_MESSAGE_HUMANNAVITASKINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <human_navigation/HumanNaviObjectInfo.h>
#include <human_navigation/HumanNaviDestination.h>
#include <human_navigation/HumanNaviObjectInfo.h>
#include <human_navigation/HumanNaviObjectInfo.h>

namespace human_navigation
{
template <class ContainerAllocator>
struct HumanNaviTaskInfo_
{
  typedef HumanNaviTaskInfo_<ContainerAllocator> Type;

  HumanNaviTaskInfo_()
    : environment_id()
    , target_object()
    , destination()
    , non_target_objects()
    , furniture()  {
    }
  HumanNaviTaskInfo_(const ContainerAllocator& _alloc)
    : environment_id(_alloc)
    , target_object(_alloc)
    , destination(_alloc)
    , non_target_objects(_alloc)
    , furniture(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _environment_id_type;
  _environment_id_type environment_id;

   typedef  ::human_navigation::HumanNaviObjectInfo_<ContainerAllocator>  _target_object_type;
  _target_object_type target_object;

   typedef  ::human_navigation::HumanNaviDestination_<ContainerAllocator>  _destination_type;
  _destination_type destination;

   typedef std::vector< ::human_navigation::HumanNaviObjectInfo_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::human_navigation::HumanNaviObjectInfo_<ContainerAllocator> >::other >  _non_target_objects_type;
  _non_target_objects_type non_target_objects;

   typedef std::vector< ::human_navigation::HumanNaviObjectInfo_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::human_navigation::HumanNaviObjectInfo_<ContainerAllocator> >::other >  _furniture_type;
  _furniture_type furniture;





  typedef boost::shared_ptr< ::human_navigation::HumanNaviTaskInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::human_navigation::HumanNaviTaskInfo_<ContainerAllocator> const> ConstPtr;

}; // struct HumanNaviTaskInfo_

typedef ::human_navigation::HumanNaviTaskInfo_<std::allocator<void> > HumanNaviTaskInfo;

typedef boost::shared_ptr< ::human_navigation::HumanNaviTaskInfo > HumanNaviTaskInfoPtr;
typedef boost::shared_ptr< ::human_navigation::HumanNaviTaskInfo const> HumanNaviTaskInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::human_navigation::HumanNaviTaskInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::human_navigation::HumanNaviTaskInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace human_navigation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'human_navigation': ['/home/kamerider/sim_ws/src/human_navigation/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::human_navigation::HumanNaviTaskInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::human_navigation::HumanNaviTaskInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::human_navigation::HumanNaviTaskInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::human_navigation::HumanNaviTaskInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::human_navigation::HumanNaviTaskInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::human_navigation::HumanNaviTaskInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::human_navigation::HumanNaviTaskInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "72a83c8dcb8252f4b5e97040679254a7";
  }

  static const char* value(const ::human_navigation::HumanNaviTaskInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x72a83c8dcb8252f4ULL;
  static const uint64_t static_value2 = 0xb5e97040679254a7ULL;
};

template<class ContainerAllocator>
struct DataType< ::human_navigation::HumanNaviTaskInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "human_navigation/HumanNaviTaskInfo";
  }

  static const char* value(const ::human_navigation::HumanNaviTaskInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::human_navigation::HumanNaviTaskInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string environment_id\n\
HumanNaviObjectInfo target_object\n\
HumanNaviDestination destination\n\
HumanNaviObjectInfo[] non_target_objects\n\
HumanNaviObjectInfo[] furniture\n\
\n\
================================================================================\n\
MSG: human_navigation/HumanNaviObjectInfo\n\
string name\n\
geometry_msgs/Point position\n\
geometry_msgs/Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: human_navigation/HumanNaviDestination\n\
geometry_msgs/Point position\n\
geometry_msgs/Quaternion orientation\n\
geometry_msgs/Point size\n\
";
  }

  static const char* value(const ::human_navigation::HumanNaviTaskInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::human_navigation::HumanNaviTaskInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.environment_id);
      stream.next(m.target_object);
      stream.next(m.destination);
      stream.next(m.non_target_objects);
      stream.next(m.furniture);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HumanNaviTaskInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::human_navigation::HumanNaviTaskInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::human_navigation::HumanNaviTaskInfo_<ContainerAllocator>& v)
  {
    s << indent << "environment_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.environment_id);
    s << indent << "target_object: ";
    s << std::endl;
    Printer< ::human_navigation::HumanNaviObjectInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.target_object);
    s << indent << "destination: ";
    s << std::endl;
    Printer< ::human_navigation::HumanNaviDestination_<ContainerAllocator> >::stream(s, indent + "  ", v.destination);
    s << indent << "non_target_objects[]" << std::endl;
    for (size_t i = 0; i < v.non_target_objects.size(); ++i)
    {
      s << indent << "  non_target_objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::human_navigation::HumanNaviObjectInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.non_target_objects[i]);
    }
    s << indent << "furniture[]" << std::endl;
    for (size_t i = 0; i < v.furniture.size(); ++i)
    {
      s << indent << "  furniture[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::human_navigation::HumanNaviObjectInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.furniture[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HUMAN_NAVIGATION_MESSAGE_HUMANNAVITASKINFO_H
